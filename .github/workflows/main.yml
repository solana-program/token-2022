name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  format_and_lint_js:
    name: Format & Lint JS
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [js, js-legacy]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          pnpm: true

      - name: Format
        run: make format-${{ matrix.package }}

      - name: Lint
        run: make lint-${{ matrix.package }}

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          stable-toolchain: true
          cargo-cache-key: cargo-audit

      - name: Install cargo-audit
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo-audit
        run: make audit

  spellchec:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          stable-toolchain: true
          cargo-cache-key: cargo-spellcheck

      - name: Install cargo-spellcheck
        uses: taiki-e/cache-cargo-install-action@v2
        with:
          tool: cargo-spellcheck

      - name: Run cargo-spellcheck
        run: make spellcheck

  format_and_lint_rust:
    name: Format & Lint Rust
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - clients-cli
          - clients-rust-legacy
          - interface
          - program
          - confidential-ciphertext-arithmetic
          - confidential-elgamal-registry
          - confidential-proof-extraction
          - confidential-proof-generation
          - confidential-proof-tests
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          clippy: true
          rustfmt: true
          cargo-cache-key: cargo-lint-${{ matrix.package }}

     - name: Install cargo-hack
       uses: taiki-e/cache-cargo-install-action@v2
       with:
         tool: cargo-hack

      - name: Format
        run: make format-check-${{ matrix.package }}

      - name: Clippy
        run: make clippy-${{ matrix.package }}

      - name: Lint / Docs
        run: make build-doc-${{ matrix.package }}

      - name: Check powerset
        run: make powerset-${{ matrix.package }}

  wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [interface, program]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          stable-toolchain: true
          cargo-cache-key: cargo-wasm-${{ matrix.package }}

      - name: Install wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Build with wasm target
        run: make build-wasm-${{ matrix.package }}

  build_sbf:
    name: Build Program
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [program, confidential-elgamal-registry]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          stable-toolchain: true
          cargo-cache-key: cargo-build-sbf-${{ matrix.package }}
          solana: true

      - name: Build
        run: make build-sbf-${{ matrix.package }}

      - name: Upload Program Build
        uses: actions/upload-artifact@v4
        with:
          name: build-sbf-${{ matrix.package }}
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save Program Builds For Client Jobs
        uses: actions/cache/save@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-${{ matrix.package }}

  test_rust:
    name: Test Rust
    runs-on: ubuntu-latest
    needs: build_sbf
    strategy:
      matrix:
        package:
          - clients-cli
          - clients-rust-legacy
          - interface
          - program
          - confidential-ciphertext-arithmetic
          - confidential-elgamal-registry
          - confidential-proof-extraction
          - confidential-proof-generation
          - confidential-proof-tests
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          stable-toolchain: true
          cargo-cache-key: cargo-test-${{ matrix.package }}

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-program

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-confidential-elgamal-registry

      - name: Test
        run: make test-${{ matrix.package }}

  generate_clients:
    name: Check Client Generation
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          pnpm: true
          rustfmt: true

      - name: Generate Clients
        run: pnpm generate:clients

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  test_js:
    name: Test JS
    runs-on: ubuntu-latest
    needs: build_sbf
    strategy:
      matrix:
        package: [js, js-legacy]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup
        with:
          pnpm: true

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-program

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-confidential-elgamal-registry

      - name: Test Client JS
        run: make test-${{ matrix.package }}
