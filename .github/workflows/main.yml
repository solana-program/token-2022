name: Main

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  JS_PACKAGES: "['js', 'js-legacy']"
  SBPF_PROGRAM_PACKAGES: "['confidential-elgamal-registry', 'program']"
  RUST_PACKAGES: "['clients-cli', 'clients-rust-legacy', 'interface', 'program', 'confidential-ciphertext-arithmetic', 'confidential-elgamal-registry', 'confidential-proof-extraction', 'confidential-proof-generation', 'confidential-proof-tests']"
  WASM_PACKAGES: "['interface', 'program']"

jobs:
  set_env:
    name: Set variables to be used in strategy definitions
    runs-on: ubuntu-latest
    outputs:
      JS_PACKAGES: ${{ steps.compute.outputs.JS_PACKAGES }}
      SBPF_PROGRAM_PACKAGES: ${{ steps.compute.outputs.SBPF_PROGRAM_PACKAGES }}
      RUST_PACKAGES: ${{ steps.compute.outputs.RUST_PACKAGES }}
      WASM_PACKAGES: ${{ steps.compute.outputs.WASM_PACKAGES }}
      RUST_TOOLCHAIN_NIGHTLY: ${{ steps.compute.outputs.RUST_TOOLCHAIN_NIGHTLY }}
      SOLANA_CLI_VERSION: ${{ steps.compute.outputs.SOLANA_CLI_VERSION }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Compute variables
        id: compute
        run: |
          echo "JS_PACKAGES=${{ env.JS_PACKAGES }}" >> $GITHUB_OUTPUT
          echo "SBPF_PROGRAM_PACKAGES=${{ env.SBPF_PROGRAM_PACKAGES }}" >> $GITHUB_OUTPUT
          echo "RUST_PACKAGES=${{ env.RUST_PACKAGES }}" >> $GITHUB_OUTPUT
          echo "WASM_PACKAGES=${{ env.WASM_PACKAGES }}" >> $GITHUB_OUTPUT
          source ./vars.env
          echo "RUST_TOOLCHAIN_NIGHTLY=$RUST_TOOLCHAIN_NIGHTLY" >> "$GITHUB_OUTPUT"
          echo "SOLANA_CLI_VERSION=$SOLANA_CLI_VERSION" >> "$GITHUB_OUTPUT"

  format_and_lint_js:
    name: Format & Lint JS
    runs-on: ubuntu-latest
    needs: set_env
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.JS_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          pnpm: true

      - name: Format
        run: make format-${{ matrix.package }}

      - name: Lint
        run: make lint-${{ matrix.package }}

  audit:
    name: Audit
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          default-toolchain: true
          cargo-cache-key: cargo-audit

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo-audit
        run: make audit

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          default-toolchain: true
          cli: true # needed for llvm-config
          cargo-cache-key: cargo-spellcheck

      - name: Install cargo-spellcheck
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-spellcheck

      - name: Run cargo-spellcheck
        run: make spellcheck

  format_and_lint_rust:
    name: Format & Lint Rust
    runs-on: ubuntu-latest
    needs: set_env
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.RUST_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          clippy-toolchain: ${{ needs.set_env.outputs.RUST_TOOLCHAIN_NIGHTLY }}
          rustfmt-toolchain: ${{ needs.set_env.outputs.RUST_TOOLCHAIN_NIGHTLY }}
          cli: true
          cargo-cache-key: cargo-lint-${{ matrix.package }}

      - name: Install cargo-hack
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-hack

      - name: Format
        run: make format-check-${{ matrix.package }}

      - name: Clippy
        run: make clippy-${{ matrix.package }}

      - name: Lint / Docs
        run: make build-doc-${{ matrix.package }}

      - name: Check powerset
        run: make powerset-${{ matrix.package }}

  wasm:
    name: Build WASM
    runs-on: ubuntu-latest
    needs: set_env
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.WASM_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          default-toolchain: true
          cargo-cache-key: cargo-wasm-${{ matrix.package }}

      - name: Install wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Build with wasm target
        run: make build-wasm-${{ matrix.package }}

  build_sbpf:
    name: Build Program
    runs-on: ubuntu-latest
    needs: set_env
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.SBPF_PROGRAM_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          default-toolchain: true
          cargo-cache-key: cargo-build-sbf-${{ matrix.package }}
          solana: ${{ needs.set_env.outputs.SOLANA_CLI_VERSION }}

      - name: Build
        run: make build-sbf-${{ matrix.package }}

      - name: Upload Program Build
        uses: actions/upload-artifact@v4
        with:
          name: build-sbf-${{ matrix.package }}
          path: ./target/deploy/*.so
          if-no-files-found: error

      - name: Save Program Builds For Client Jobs
        uses: actions/cache/save@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-${{ matrix.package }}

  test_rust:
    name: Test Rust
    runs-on: ubuntu-latest
    needs: [build_sbpf, set_env]
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.RUST_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          default-toolchain: true
          cli: true
          cargo-cache-key: cargo-test-${{ matrix.package }}

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-program

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-confidential-elgamal-registry

      - name: Test
        run: make test-${{ matrix.package }}

  generate_clients:
    name: Check Client Generation
    runs-on: ubuntu-latest
    needs: set_env
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          pnpm: true
          rustfmt-toolchain: ${{ needs.set_env.outputs.RUST_TOOLCHAIN_NIGHTLY }}

      - name: Generate Clients
        run: pnpm generate:clients

      - name: Check Working Directory
        run: |
          git status --porcelain
          test -z "$(git status --porcelain)"

  test_js:
    name: Test JS
    runs-on: ubuntu-latest
    needs: [build_sbpf, set_env]
    strategy:
      matrix:
        package: ${{ fromJson(needs.set_env.outputs.JS_PACKAGES) }}
      fail-fast: false
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: solana-program/actions/setup-ubuntu@master
        with:
          solana: ${{ needs.set_env.outputs.SOLANA_CLI_VERSION }}
          pnpm: true

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-program

      - name: Restore Program Builds
        uses: actions/cache/restore@v4
        with:
          path: ./target/deploy/*.so
          key: ${{ runner.os }}-builds-${{ github.sha }}-confidential-elgamal-registry

      - name: Test Client JS
        run: make test-${{ matrix.package }}
